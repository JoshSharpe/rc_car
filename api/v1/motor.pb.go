// Code generated by protoc-gen-go. DO NOT EDIT.
// source: motor.proto

package car

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Vector struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float32  `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_7024f82ae1d6a6dd, []int{0}
}

func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type MoveVector struct {
	Direction            *Vector  `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	Rotation             *Vector  `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveVector) Reset()         { *m = MoveVector{} }
func (m *MoveVector) String() string { return proto.CompactTextString(m) }
func (*MoveVector) ProtoMessage()    {}
func (*MoveVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_7024f82ae1d6a6dd, []int{1}
}

func (m *MoveVector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveVector.Unmarshal(m, b)
}
func (m *MoveVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveVector.Marshal(b, m, deterministic)
}
func (m *MoveVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveVector.Merge(m, src)
}
func (m *MoveVector) XXX_Size() int {
	return xxx_messageInfo_MoveVector.Size(m)
}
func (m *MoveVector) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveVector.DiscardUnknown(m)
}

var xxx_messageInfo_MoveVector proto.InternalMessageInfo

func (m *MoveVector) GetDirection() *Vector {
	if m != nil {
		return m.Direction
	}
	return nil
}

func (m *MoveVector) GetRotation() *Vector {
	if m != nil {
		return m.Rotation
	}
	return nil
}

type SensorParameters struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorParameters) Reset()         { *m = SensorParameters{} }
func (m *SensorParameters) String() string { return proto.CompactTextString(m) }
func (*SensorParameters) ProtoMessage()    {}
func (*SensorParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_7024f82ae1d6a6dd, []int{2}
}

func (m *SensorParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorParameters.Unmarshal(m, b)
}
func (m *SensorParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorParameters.Marshal(b, m, deterministic)
}
func (m *SensorParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorParameters.Merge(m, src)
}
func (m *SensorParameters) XXX_Size() int {
	return xxx_messageInfo_SensorParameters.Size(m)
}
func (m *SensorParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorParameters.DiscardUnknown(m)
}

var xxx_messageInfo_SensorParameters proto.InternalMessageInfo

// The response message containing the greetings
type CurrentData struct {
	ErrorMessage         string   `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	Location             *Vector  `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Rotation             *Vector  `protobuf:"bytes,3,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Velocity             *Vector  `protobuf:"bytes,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentData) Reset()         { *m = CurrentData{} }
func (m *CurrentData) String() string { return proto.CompactTextString(m) }
func (*CurrentData) ProtoMessage()    {}
func (*CurrentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7024f82ae1d6a6dd, []int{3}
}

func (m *CurrentData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentData.Unmarshal(m, b)
}
func (m *CurrentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentData.Marshal(b, m, deterministic)
}
func (m *CurrentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentData.Merge(m, src)
}
func (m *CurrentData) XXX_Size() int {
	return xxx_messageInfo_CurrentData.Size(m)
}
func (m *CurrentData) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentData.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentData proto.InternalMessageInfo

func (m *CurrentData) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CurrentData) GetLocation() *Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CurrentData) GetRotation() *Vector {
	if m != nil {
		return m.Rotation
	}
	return nil
}

func (m *CurrentData) GetVelocity() *Vector {
	if m != nil {
		return m.Velocity
	}
	return nil
}

func init() {
	proto.RegisterType((*Vector)(nil), "car.Vector")
	proto.RegisterType((*MoveVector)(nil), "car.MoveVector")
	proto.RegisterType((*SensorParameters)(nil), "car.SensorParameters")
	proto.RegisterType((*CurrentData)(nil), "car.CurrentData")
}

func init() { proto.RegisterFile("motor.proto", fileDescriptor_7024f82ae1d6a6dd) }

var fileDescriptor_7024f82ae1d6a6dd = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xff, 0x9b, 0x94, 0xf2, 0xef, 0xa4, 0x62, 0x59, 0x10, 0x82, 0x27, 0xd9, 0x8b, 0x8a,
	0x90, 0x43, 0xbc, 0x79, 0xad, 0xe0, 0xa9, 0x20, 0x11, 0x3c, 0x3b, 0xae, 0x83, 0x04, 0xda, 0x8c,
	0x4c, 0xc6, 0xd2, 0xf4, 0x33, 0xf9, 0x21, 0x65, 0x37, 0xd6, 0x5a, 0xad, 0x1e, 0xdf, 0xbe, 0xdf,
	0x30, 0xf3, 0xde, 0x42, 0xb6, 0x60, 0x65, 0x29, 0x5e, 0x84, 0x95, 0x6d, 0xea, 0x51, 0x5c, 0x09,
	0xc3, 0x7b, 0xf2, 0xca, 0x62, 0xc7, 0x60, 0x56, 0xb9, 0x39, 0x31, 0x67, 0x49, 0x65, 0x56, 0x41,
	0x75, 0x79, 0xd2, 0xab, 0x2e, 0xa8, 0x75, 0x9e, 0xf6, 0x6a, 0xed, 0x1e, 0x00, 0x66, 0xbc, 0xa4,
	0x8f, 0xb9, 0x73, 0x18, 0x3d, 0xd5, 0x42, 0x5e, 0x6b, 0x6e, 0xe2, 0x7c, 0x56, 0x66, 0x85, 0x47,
	0x29, 0x7a, 0xbf, 0xda, 0xba, 0xf6, 0x14, 0xfe, 0x0b, 0x2b, 0x46, 0x32, 0xf9, 0x49, 0x7e, 0x9a,
	0xce, 0xc2, 0xe4, 0x8e, 0x9a, 0x96, 0xe5, 0x16, 0x05, 0x17, 0xa4, 0x24, 0xad, 0x7b, 0x33, 0x90,
	0x4d, 0x5f, 0x45, 0xa8, 0xd1, 0x6b, 0x54, 0xb4, 0x0e, 0xc6, 0x24, 0xc2, 0x32, 0xa3, 0xb6, 0xc5,
	0x67, 0x8a, 0xab, 0x47, 0xd5, 0xce, 0x5b, 0x58, 0x38, 0x67, 0xff, 0xfb, 0xc2, 0x8d, 0xb9, 0x73,
	0x59, 0xfa, 0xc7, 0x65, 0x01, 0x5c, 0xd2, 0x9c, 0x7d, 0xad, 0x5d, 0x3e, 0xd8, 0x03, 0x6e, 0xcc,
	0xb2, 0x81, 0x74, 0x8a, 0x62, 0x2f, 0x60, 0x10, 0xba, 0xb2, 0x87, 0x91, 0xda, 0xd6, 0x76, 0x3c,
	0x89, 0x0f, 0x5f, 0x02, 0xb9, 0x7f, 0xf6, 0x0a, 0x0e, 0x6e, 0x48, 0xfb, 0xe4, 0x31, 0xe3, 0x51,
	0x84, 0xbe, 0x57, 0xb1, 0x6f, 0xf6, 0x71, 0x18, 0x3f, 0xf5, 0xf2, 0x3d, 0x00, 0x00, 0xff, 0xff,
	0x80, 0x7f, 0xc5, 0xac, 0xe3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CarClient is the client API for Car service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CarClient interface {
	Move(ctx context.Context, in *MoveVector, opts ...grpc.CallOption) (*CurrentData, error)
	GetSensorData(ctx context.Context, in *SensorParameters, opts ...grpc.CallOption) (*CurrentData, error)
}

type carClient struct {
	cc *grpc.ClientConn
}

func NewCarClient(cc *grpc.ClientConn) CarClient {
	return &carClient{cc}
}

func (c *carClient) Move(ctx context.Context, in *MoveVector, opts ...grpc.CallOption) (*CurrentData, error) {
	out := new(CurrentData)
	err := c.cc.Invoke(ctx, "/car.Car/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetSensorData(ctx context.Context, in *SensorParameters, opts ...grpc.CallOption) (*CurrentData, error) {
	out := new(CurrentData)
	err := c.cc.Invoke(ctx, "/car.Car/GetSensorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServer is the server API for Car service.
type CarServer interface {
	Move(context.Context, *MoveVector) (*CurrentData, error)
	GetSensorData(context.Context, *SensorParameters) (*CurrentData, error)
}

// UnimplementedCarServer can be embedded to have forward compatible implementations.
type UnimplementedCarServer struct {
}

func (*UnimplementedCarServer) Move(ctx context.Context, req *MoveVector) (*CurrentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (*UnimplementedCarServer) GetSensorData(ctx context.Context, req *SensorParameters) (*CurrentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorData not implemented")
}

func RegisterCarServer(s *grpc.Server, srv CarServer) {
	s.RegisterService(&_Car_serviceDesc, srv)
}

func _Car_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveVector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.Car/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).Move(ctx, req.(*MoveVector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.Car/GetSensorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetSensorData(ctx, req.(*SensorParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _Car_serviceDesc = grpc.ServiceDesc{
	ServiceName: "car.Car",
	HandlerType: (*CarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _Car_Move_Handler,
		},
		{
			MethodName: "GetSensorData",
			Handler:    _Car_GetSensorData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "motor.proto",
}
